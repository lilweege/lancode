import json

with open("data.json", "r") as f:
    res = json.loads(f.read())

slugs = set(["find-minimum-operations-to-make-all-elements-divisible-by-three", "n-th-tribonacci-number", "count-pairs-that-form-a-complete-day-i", "convert-binary-number-in-a-linked-list-to-integer", "make-two-arrays-equal-by-reversing-subarrays", "first-letter-to-appear-twice", "build-array-from-permutation", "number-of-good-pairs", "jewels-and-stones", "merge-strings-alternately", "check-if-the-sentence-is-pangram", "find-n-unique-integers-sum-up-to-zero", "largest-positive-integer-that-exists-with-its-negative", "count-tested-devices-after-test-operations", "find-the-xor-of-numbers-which-appear-twice", "last-stone-weight", "kids-with-the-greatest-number-of-candies", "sort-array-by-parity", "build-an-array-with-stack-operations", "relative-sort-array", "destination-city", "faulty-keyboard", "unique-number-of-occurrences", "find-the-town-judge", "find-words-that-can-be-formed-by-characters", "k-closest-points-to-origin", "count-elements-with-maximum-frequency", "split-a-string-in-balanced-strings", "backspace-string-compare", "maximum-odd-binary-number", "maximum-score-after-splitting-a-string", "water-bottles", "maximum-difference-between-increasing-elements", "check-if-it-is-a-straight-line", "largest-odd-number-in-string", "maximum-bags-with-full-capacity-of-rocks", "minimum-common-value", "maximum-level-sum-of-a-binary-tree", "sort-integers-by-the-number-of-1-bits", "maximum-number-of-vowels-in-a-substring-of-given-length", "pass-the-pillow", "number-of-laser-beams-in-a-bank", "least-number-of-unique-integers-after-k-removals", "leaf-similar-trees", "minimum-number-of-operations-to-move-all-balls-to-each-box", "kth-missing-positive-number", "calculate-digit-sum-of-a-string", "height-checker", "evaluate-boolean-binary-tree", "redistribute-characters-to-make-all-strings-equal", "minimum-operations-to-make-binary-array-elements-equal-to-one-i", "find-players-with-zero-or-one-losses", "decompress-run-length-encoded-list", "time-needed-to-buy-tickets", "minimum-number-of-steps-to-make-two-strings-anagram", "destroying-asteroids", "letter-case-permutation", "max-number-of-k-sum-pairs", "determine-the-minimum-sum-of-a-k-avoiding-array", "two-city-scheduling", "minimum-processing-time", "minimum-changes-to-make-alternating-binary-string", "optimal-partition-of-string", "min-cost-climbing-stairs", "find-the-original-array-of-prefix-xor", "sum-of-all-subset-xor-totals", "sequential-digits", "binary-search-tree-to-greater-sum-tree", "queries-on-number-of-points-inside-a-circle", "minimum-flips-to-make-a-or-b-equal-to-c", "count-pairs-that-form-a-complete-day-ii", "deepest-leaves-sum", "find-the-k-or-of-an-array", "minimum-number-of-operations-to-make-array-empty", "divide-array-into-arrays-with-max-difference", "jump-game-iii", "number-of-steps-to-reduce-a-number-in-binary-representation-to-one", "greatest-common-divisor-of-strings", "number-of-students-unable-to-eat-lunch", "pseudo-palindromic-paths-in-a-binary-tree", "matrix-similarity-after-cyclic-shifts", "keys-and-rooms", "find-the-winner-of-the-circular-game", "grumpy-bookstore-owner", "arithmetic-subarrays", "longest-subarray-of-1s-after-deleting-one-element", "smallest-string-starting-from-leaf", "remove-adjacent-almost-equal-characters", "find-champion-ii", "minimum-operations-to-make-binary-array-elements-equal-to-one-ii", "rotting-oranges", "even-odd-tree", "maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts", "find-missing-observations", "maximum-difference-between-node-and-ancestor", "minimum-increment-to-make-array-unique", "xor-queries-of-a-subarray", "validate-binary-tree-nodes", "count-nodes-equal-to-average-of-subtree", "successful-pairs-of-spells-and-potions", "minimum-sum-of-mountain-triplets-ii", "shortest-and-lexicographically-smallest-beautiful-string", "reverse-substrings-between-each-pair-of-parentheses", "divide-array-in-sets-of-k-consecutive-numbers", "count-number-of-homogenous-substrings", "sum-of-absolute-differences-in-a-sorted-array", "maximum-total-importance-of-roads", "get-equal-substrings-within-budget", "partition-array-into-disjoint-intervals", "minimum-length-of-string-after-deleting-similar-ends", "minimum-deletions-to-make-character-frequencies-unique", "beautiful-towers-i", "find-polygon-with-the-largest-perimeter", "count-triplets-that-can-form-two-arrays-of-equal-xor", "minimum-number-of-operations-to-make-array-xor-equal-to-k", "minimum-equal-sum-of-two-arrays-after-replacing-zeros", "eliminate-maximum-number-of-monsters", "boats-to-save-people", "unique-length-3-palindromic-subsequences", "length-of-longest-subarray-with-at-most-k-frequency", "balance-a-binary-search-tree", "interval-list-intersections", "count-number-of-maximum-bitwise-or-subsets", "k-th-symbol-in-grammar", "minimum-falling-path-sum", "minimum-time-to-make-rope-colorful", "restore-the-array-from-adjacent-pairs", "binary-subarrays-with-sum", "last-moment-before-all-ants-fall-out-of-a-plank", "count-number-of-nice-subarrays", "reorder-routes-to-make-all-paths-lead-to-the-city-zero", "nearest-exit-from-entrance-in-maze", "minimum-operations-to-reduce-an-integer-to-0", "number-of-dice-rolls-with-target-sum", "max-consecutive-ones-iii", "minimum-remove-to-make-valid-parentheses", "length-of-the-longest-subsequence-that-sums-to-target", "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit", "subarray-sums-divisible-by-k", "reducing-dishes", "minimum-time-to-collect-all-apples-in-a-tree", "reveal-cards-in-increasing-order", "knight-dialer", "minimum-falling-path-sum-ii", "count-subarrays-where-max-element-appears-at-least-k-times", "maximum-compatibility-score-sum", "most-profit-assigning-work", "online-stock-span", "minimum-number-of-coins-for-fruits", "distribute-coins-in-binary-tree", "amount-of-time-for-binary-tree-to-be-infected", "longest-zigzag-path-in-a-binary-tree", "maximum-length-of-a-concatenated-string-with-unique-characters", "count-vowels-permutation", "extra-characters-in-a-string", "count-nice-pairs-in-an-array", "bag-of-tokens", "total-cost-to-hire-k-workers", "koko-eating-bananas", "maximum-sum-circular-subarray", "diagonal-traverse-ii", "design-a-food-rating-system", "remove-zero-sum-consecutive-nodes-from-linked-list", "cheapest-flights-within-k-stops", "flip-binary-tree-to-match-preorder-traversal", "all-ancestors-of-a-node-in-a-directed-acyclic-graph", "possible-bipartition", "recover-a-tree-from-preorder-traversal", "step-by-step-directions-from-a-binary-tree-node-to-another", "uncrossed-lines", "jump-game-iv", "design-graph-with-shortest-path-calculator", "score-after-flipping-matrix", "max-dot-product-of-two-subsequences", "find-in-mountain-array", "count-words-obtained-after-adding-a-letter", "domino-and-tromino-tiling", "unique-paths-iii", "longest-ideal-subsequence", "minimum-number-of-k-consecutive-bit-flips", "maximum-total-damage-with-spell-casting", "path-with-maximum-probability", "maximize-the-profit-as-the-salesman", "number-of-ways-to-stay-in-the-same-place-after-some-steps", "champagne-tower", "maximum-score-from-removing-substrings", "frequency-of-the-most-frequent-element", "open-the-lock", "detonate-the-maximum-bombs", "maximum-score-words-formed-by-letters", "longest-unequal-adjacent-groups-subsequence-ii", "binary-trees-with-factors", "minimum-initial-energy-to-finish-tasks", "maximum-sum-bst-in-binary-tree", "minimum-size-subarray-in-infinite-array", "number-of-ways-to-divide-a-long-corridor", "partition-array-for-maximum-sum", "magnetic-force-between-two-balls", "largest-submatrix-with-rearrangements", "making-a-large-island", "maximum-score-after-applying-operations-on-a-tree", "minimum-number-of-days-to-make-m-bouquets", "maximum-score-of-a-good-subarray", "cherry-pickup-ii", "furthest-building-you-can-reach", "bus-routes", "find-the-maximum-length-of-valid-subsequence-ii", "sum-of-subarray-minimums", "count-the-number-of-good-partitions", "find-all-people-with-secret", "minimize-the-difference-between-target-and-chosen-elements", "decoded-string-at-index", "number-of-flowers-in-full-bloom", "maximum-profit-in-job-scheduling", "the-number-of-beautiful-subsets", "minimum-increment-operations-to-make-array-beautiful", "constrained-subsequence-sum", "minimum-difficulty-of-a-job-schedule", "maximum-trailing-zeros-in-a-cornered-path", "make-lexicographically-smallest-array-by-swapping-elements", "maximum-subsequence-score", "beautiful-towers-ii", "construct-product-matrix", "minimum-number-of-operations-to-make-arrays-similar", "number-of-possible-sets-of-closing-branches", "parallel-courses-iii", "minimum-number-of-operations-to-make-array-continuous", "check-if-there-is-a-valid-parentheses-string-path", "robot-collisions", "count-subarrays-with-fixed-bounds", "meeting-rooms-iii", "swim-in-rising-water", "minimum-cost-to-make-array-equalindromic", "process-restricted-friend-requests", "remove-max-number-of-edges-to-keep-graph-fully-traversable", "minimum-number-of-groups-to-create-a-valid-assignment", "find-the-safest-path-in-a-grid", "peaks-in-array", "k-th-smallest-prime-fraction", "greatest-common-divisor-traversal", "apply-operations-to-make-two-strings-equal", "build-array-where-you-can-find-the-maximum-exactly-k-comparisons", "smallest-subsequence-of-distinct-characters", "number-of-submatrices-that-sum-to-target", "allocate-mailboxes", "sum-of-distances-in-tree", "second-minimum-time-to-reach-destination", "subarrays-with-k-different-integers", "number-of-wonderful-substrings", "minimum-cost-to-hire-k-workers", "find-the-maximum-sum-of-node-values", "stone-game-ix", "find-minimum-time-to-finish-all-jobs", "minimum-interval-to-include-each-query", "checking-existence-of-edge-length-limited-paths", "apply-operations-on-array-to-maximize-sum-of-squares", "minimum-one-bit-operations-to-make-integers-zero", "selling-pieces-of-wood", "tallest-billboard", "minimum-cost-to-reach-destination-in-time", "painting-the-walls", "count-valid-paths-in-a-tree", "count-beautiful-substrings-ii", "steps-to-make-array-non-decreasing", "string-compression-ii",])

res = [x for x in res if x["TitleSlug"] in slugs]
mn_rating = min(x["Rating"] for x in res)
mx_rating = max(x["Rating"] for x in res)

def scaleRating(rating):
    MAX_POINTS = 10
    MIN_POINTS = 3
    raw_points = (rating - mn_rating) / (mx_rating - mn_rating)
    points = (MAX_POINTS - MIN_POINTS) * raw_points ** 2 + MIN_POINTS
    return points

tot = 0
def extractRow(entry):
    points = scaleRating(entry["Rating"])
    global tot
    tot += points
    return ','.join([
        f"{points:.2f}",
        str(entry["ID"]) + ". " + entry["Title"],
        entry["TitleSlug"],
        "",
        "false",
    ])

out = []
for row in res:
    line = extractRow(row)
    out.append(line)
out.reverse()

csvData = "Points,Question,Slug,InProgress,Solved\n" + '\n'.join(out)
with open("questions.csv", "w") as f:
    f.write(csvData)

